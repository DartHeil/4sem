#include "Vector3.h"

Vector3::Vector3()
{
  x_(0);
  y_(0);
  z_(0);
}

Vector3::Vector3(double x, double y, double z)
{
  x_(x);
  y_(y);
  z_(z);
}

Vector3::Vector3(const Vector3 & other):
{
  x_(other.x_);
  y_(other.y_);
  z_(other.z_);
}

Vector3::~Vector3()
{}

const Vector3 & Vector3::operator=(const Vector3 & other)
{
  x_ = other.x_;
  y_ = other.y_;
  z_ = other.z_;
  return *this;
}

Vector3 Vector3::operator+(const Vector3 & other) const
{
  return Vector3(x_ + other.x_, y_ + other.y_, z_ + other.z_);
}

Vector3 & Vector3::operator+=(const Vector3 & other)
{
  x_ += other.x_;
  y_ += other.y_;
  z_ += other.z_;
  return *this;
}

Vector3 Vector3::operator-(const Vector3 & other) const
{
  return Vector3(x_ - other.x_, y_ - other.y_, z_ - other.z_);
}

Vector3 & Vector3::operator-=(const Vector3 & other)
{
  x_ -= other.x_;
  y_ -= other.y_;
  z_ -= other.z_;
  return *this;
}

Vector3 Vector3::operator-() const
{
  return Vector3(-x_, -y_, -z_);
}

Vector3 Vector3::operator*(double k) const
{
  return Vector3(k * x_, k * y_, k * z_);
}

double Vector3::operator*(const Vector3 & other) const
{
  return x_ * other.x_ + y_ * other.y_ + z_ * other.z_;
}

Vector3 Vector3::operator^(const Vector3 & other) const
{
  return Vector3(y_ * other.z_ - z_ * other.y_, z_ * other.x_ - x_ * other.z_, x_ * other.y_ - y_ * other.x_);
}

double Vector3::squareLen() const
{
  return (*this) * (*this);
}

double Vector3::len() const
{
  return std::sqrt((*this).squareLen());
}

Vector3 & Vector3::norm()
{
  double len = (*this).len();
  if (len == 0)
    return (*this);
  x_ /= len;
  y_ /= len;
  z_ /= len;
  return (*this);
}

Vector3 & Vector3::rotate(double angle, const Vector3 & axis)
{
  if (almostEqual(axis.len(), 0.0))
    return *this;

  Vector3 axisNorm = axis;
  axisNorm.norm();

  double cosA = std::cos(angle);
  double sinA = std::sin(angle);
  Vector3 self = *this;

  Vector3 a = self - axisNorm * (axisNorm * self);
  Vector3 b = a ^ axisNorm;
  Vector3 delta = a * cosA + b * sinA - a;
  self += delta;
  *this = self;

  return *this;

}

Vector3 Vector3::getRotated(double angle, const Vector3 & axis) const
{
  Vector3 tmp = *this;
  tmp.rotate(angle, axis);
  return tmp;
}

double Vector3::angle(const Vector3 & other) const
{
  double len1 = (*this).len();
  double len2 = other.len();
  if (len1 == 0 || len2 == 0)	//same question as in rotate()
    return 0;
  return std::acos((*this) * other / len1 / len2);
}

Vector3 operator*(double k, const Vector3 & v)
{
  return Vector3(v * k);
}

std::ostream & operator<<(std::ostream & stream, const Vector3 & v)
{
  stream << "(" << v.x_ << " " << v.y_ << " " << v.z_ << ")";
  return stream;
}

std::istream & operator>>(std::istream & stream, Vector3 & v)
{
  stream >> v.x_ >> v.y_ >> v.z_;
  return stream;
}

